package com.cekj.didimain.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cekj.didimain.db.greendao.CallEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CALL_ENTITY.
*/
public class CallEntityDao extends AbstractDao<CallEntity, Long> {

    public static final String TABLENAME = "CALL_ENTITY";

    /**
     * Properties of entity CallEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderId = new Property(1, int.class, "orderId", false, "ORDER_ID");
        public final static Property OrderType = new Property(2, String.class, "orderType", false, "ORDER_TYPE");
        public final static Property OrderTime = new Property(3, String.class, "orderTime", false, "ORDER_TIME");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
    };


    public CallEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CallEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CALL_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ORDER_ID' INTEGER NOT NULL ," + // 1: orderId
                "'ORDER_TYPE' TEXT NOT NULL ," + // 2: orderType
                "'ORDER_TIME' TEXT NOT NULL ," + // 3: orderTime
                "'DESCRIPTION' TEXT NOT NULL );"); // 4: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CALL_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CallEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOrderId());
        stmt.bindString(3, entity.getOrderType());
        stmt.bindString(4, entity.getOrderTime());
        stmt.bindString(5, entity.getDescription());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CallEntity readEntity(Cursor cursor, int offset) {
        CallEntity entity = new CallEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // orderId
            cursor.getString(offset + 2), // orderType
            cursor.getString(offset + 3), // orderTime
            cursor.getString(offset + 4) // description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CallEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderId(cursor.getInt(offset + 1));
        entity.setOrderType(cursor.getString(offset + 2));
        entity.setOrderTime(cursor.getString(offset + 3));
        entity.setDescription(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CallEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CallEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
